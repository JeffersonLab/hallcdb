import os, sys
import logging
#import xml.etree.ElementTree as Et
from subprocess import check_output
import subprocess
from datetime import datetime

from rcdb.log_format import BraceMessage as Lf
from hallc_rcdb import HallCconditions

log = logging.getLogger("hallcdb.parser")
log.addHandler(logging.NullHandler())

class HallCEpicsParseResult(object):
    def __init__(self):
        self.beam_energy = None        # Beam Energy
        self.target = None             # Target BDS value
        self.hms_angle = None          # HMS angle 
        self.shms_angle = None         # SHMS angle         
        self.nps_angle = None          # NPS angle 
        self.user_comment = None       # daq gui user comment
        self.beam_current = None       # Beam Current

def epics_parser(epics_list):
    parse_result = {}
    for epics_name, cond_name in epics_list.items():
        parse_result[cond_name] = None
        try:
            cmds = ['caget', '-t', epics_name]
            out_str = subprocess.Popen(cmds, stdout=subprocess.PIPE).stdout.read().strip()
            value = out_str.decode('ascii')
            parse_result[cond_name] = float(value)
        except Exception as ex:
            log.warning("Error: " + str(ex))
            continue
    return parse_result

def coda_parser():
    # default paths
    runtyp_file = "/home/coda/coda/datafile/actRunType"
    runnum_file = "/home/coda/coda/datafile/rcRunNumber"

def runinfo_parser(runinfo_file):
    # parse info from a run start gui output file
    runinfo = {}
    with open(runinfo_file, "r") as f:
        output = f.read()
        d_info = filter(None, [x.strip() for x in output.strip().split("[")])
        for line in d_info:
            subj = line.split("]\n",1)[0]
            runinfo[subj] = {}
            for cont in [x.strip() for x in line.split("]\n",1)[1].split("\n")]:
                group = cont.split(":",1)[0]
                var = cont.split(":",1)[1]
                runinfo[subj][group] = var

    return runinfo
